<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最大的矩形</title>
    <url>/2021/03/16/acm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p><a href="http://118.190.20.162/view.page?gpid=T3">题目链接</a></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/acm_1.png" alt="题目描述" title="描述"><br><span id="more"></span></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/acm_2.png" alt="题目描述"></p>
<hr>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><ul>
<li>首先看数据范围：1&lt;= n &lt;= 1000 &amp;&amp; 1&lt;= hi &lt;= 10000 ,需要时间复杂度小于等于 O(n<sup>2</sup>) </li>
<li>确定枚举的对象，本题中可以枚举矩形的上边界。知道矩形的上边界和左右边界之后就可以确定一个矩形。枚举矩形的上边界，设横坐标为 i ，高度为 h，经过观察可以发现，上边界确定之后，以该边为上边界的最大矩形就可以确定：左边界为 i 前左数高度第一个小于 h 的；右边界为i 后往右数高度第一个小于 h 的。之后更新最大矩形。</li>
</ul>
<hr>
<h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1020</span>;</span><br><span class="line"><span class="keyword">int</span> n,re,ans;</span><br><span class="line"><span class="keyword">int</span> h[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;h[i];</span><br><span class="line">	&#125;</span><br><span class="line">    	<span class="comment">//枚举上边界</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> l = i,r = i;</span><br><span class="line">        <span class="comment">//搜索左边界</span></span><br><span class="line">		<span class="keyword">while</span>(l&gt;= <span class="number">1</span> &amp;&amp; h[l]&gt;= h[i])&#123;</span><br><span class="line">			l--;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//搜索右边界</span></span><br><span class="line">		<span class="keyword">while</span>(r &lt;= n &amp;&amp; h[r] &gt;= h[i])&#123;</span><br><span class="line">			r++;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//计算矩形面积，注意r - l之后需要减1.</span></span><br><span class="line">		re = (r - l - <span class="number">1</span>)*h[i];</span><br><span class="line">		ans = max(re,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的数</title>
    <url>/2021/03/17/acm2-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、-题目描述"><a href="#一、-题目描述" class="headerlink" title="一、 题目描述"></a>一、 题目描述</h2><p><a href="http://118.190.20.162/view.page?gpid=T2">题目链接</a></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/a.jpg" alt="描述"><br><span id="more"></span></p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><ul>
<li><p>题目中有三个要求，可以将0和1看作第一类，2和3看作第一类，然后就是排列组合问题。</p>
</li>
<li><p>首先设第一类数个数为 <strong>k</strong> ，则第二类数个数为 <strong>n - k</strong>。<strong>k</strong>的范围为：[2 ，n - 2] </p>
</li>
<li><p>从k个位置中选取第一类的位置，因为最高为不能为0，所以第一类的可能位置有 :</p>
<script type="math/tex; mode=display">
C_{n-1}^{k}</script></li>
<li><p>之后具体分第一类中0和1的位置，因为 <strong>0</strong> 在<strong>1</strong>的前面且必须有一个，所以第一类里面的情况有  <strong>k-1</strong> 种：01111…11(一个0和k-1个1)  和00111…111(两个0和k-2个1)  到 0000…0001  (k-1个0和共1个1)。</p>
</li>
<li><p>同理第二类数字中的位置情况： <strong>n - k - 1</strong>种。</p>
</li>
<li><p><strong>综上所述</strong>，方案数为：</p>
<script type="math/tex; mode=display">
\sum_{k=2}^{n-2}  C_{n-1}^{k} \times (k-1) \times (n-k-1)</script></li>
</ul>
<hr>
<h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>,mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,re,t,c[N][N];</span><br><span class="line"><span class="comment">//组合数数组的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;= i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!j)  c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n<span class="number">-2</span> ; i++)&#123;</span><br><span class="line">        <span class="comment">//因为可能超范围，所以转换为long,相乘的中间也要模一下</span></span><br><span class="line">        re =( re +  (ll)c[n<span class="number">-1</span>][i]*(i<span class="number">-1</span>)%mod  *(n<span class="number">-1</span>-i)  )%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;re&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>枚举</tag>
        <tag>组合数</tag>
      </tags>
  </entry>
</search>
