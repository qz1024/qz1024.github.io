<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>最大的矩形</title>
    <url>/2021/03/16/acm/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p><a href="http://118.190.20.162/view.page?gpid=T3">题目链接</a></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/acm_1.png" alt="题目描述" title="描述"><br><span id="more"></span></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/acm_2.png" alt="题目描述"></p>
<hr>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><ul>
<li>首先看数据范围：1&lt;= n &lt;= 1000 &amp;&amp; 1&lt;= hi &lt;= 10000 ,需要时间复杂度小于等于 O(n<sup>2</sup>) </li>
<li>确定枚举的对象，本题中可以枚举矩形的上边界。知道矩形的上边界和左右边界之后就可以确定一个矩形。枚举矩形的上边界，设横坐标为 i ，高度为 h，经过观察可以发现，上边界确定之后，以该边为上边界的最大矩形就可以确定：左边界为 i 前左数高度第一个小于 h 的；右边界为i 后往右数高度第一个小于 h 的。之后更新最大矩形。</li>
</ul>
<hr>
<h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1020</span>;</span><br><span class="line"><span class="keyword">int</span> n,re,ans;</span><br><span class="line"><span class="keyword">int</span> h[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;	</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= n;i++)&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;h[i];</span><br><span class="line">	&#125;</span><br><span class="line">    	<span class="comment">//枚举上边界</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= n;i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> l = i,r = i;</span><br><span class="line">        <span class="comment">//搜索左边界</span></span><br><span class="line">		<span class="keyword">while</span>(l&gt;= <span class="number">1</span> &amp;&amp; h[l]&gt;= h[i])&#123;</span><br><span class="line">			l--;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//搜索右边界</span></span><br><span class="line">		<span class="keyword">while</span>(r &lt;= n &amp;&amp; h[r] &gt;= h[i])&#123;</span><br><span class="line">			r++;</span><br><span class="line">		&#125;</span><br><span class="line">        <span class="comment">//计算矩形面积，注意r - l之后需要减1.</span></span><br><span class="line">		re = (r - l - <span class="number">1</span>)*h[i];</span><br><span class="line">		ans = max(re,ans);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>有趣的数</title>
    <url>/2021/03/17/acm2-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、-题目描述"><a href="#一、-题目描述" class="headerlink" title="一、 题目描述"></a>一、 题目描述</h2><p><a href="http://118.190.20.162/view.page?gpid=T2">题目链接</a></p>
<p><img src="https://gitee.com/qztanging/images/raw/master/img/a.jpg" alt="描述"><br><span id="more"></span></p>
<h2 id="二、分析"><a href="#二、分析" class="headerlink" title="二、分析"></a>二、分析</h2><ul>
<li><p>题目中有三个要求，可以将0和1看作第一类，2和3看作第一类，然后就是排列组合问题。</p>
</li>
<li><p>首先设第一类数个数为 <strong>k</strong> ，则第二类数个数为 <strong>n - k</strong>。<strong>k</strong>的范围为：[2 ，n - 2] </p>
</li>
<li><p>从k个位置中选取第一类的位置，因为最高为不能为0，所以第一类的可能位置有 :</p>
<script type="math/tex; mode=display">
C_{n-1}^{k}</script></li>
<li><p>之后具体分第一类中0和1的位置，因为 <strong>0</strong> 在<strong>1</strong>的前面且必须有一个，所以第一类里面的情况有  <strong>k-1</strong> 种：01111…11(一个0和k-1个1)  和00111…111(两个0和k-2个1)  到 0000…0001  (k-1个0和共1个1)。</p>
</li>
<li><p>同理第二类数字中的位置情况： <strong>n - k - 1</strong>种。</p>
</li>
<li><p><strong>综上所述</strong>，方案数为：</p>
<script type="math/tex; mode=display">
\sum_{k=2}^{n-2}  C_{n-1}^{k} \times (k-1) \times (n-k-1)</script></li>
</ul>
<hr>
<h2 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1010</span>,mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,re,t,c[N][N];</span><br><span class="line"><span class="comment">//组合数数组的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;= i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!j)  c[i][j] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                c[i][j] = (c[i<span class="number">-1</span>][j<span class="number">-1</span>] + c[i<span class="number">-1</span>][j])%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt;= n<span class="number">-2</span> ; i++)&#123;</span><br><span class="line">        <span class="comment">//因为可能超范围，所以转换为long,相乘的中间也要模一下</span></span><br><span class="line">        re =( re +  (ll)c[n<span class="number">-1</span>][i]*(i<span class="number">-1</span>)%mod  *(n<span class="number">-1</span>-i)  )%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;re&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>acm</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>枚举</tag>
        <tag>组合数</tag>
      </tags>
  </entry>
  <entry>
    <title>行列式概念</title>
    <url>/2021/03/21/post/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、二三阶行列式"><a href="#一、二三阶行列式" class="headerlink" title="一、二三阶行列式"></a>一、二三阶行列式</h2><h3 id="1-二阶行列式定义"><a href="#1-二阶行列式定义" class="headerlink" title="1. 二阶行列式定义"></a>1. 二阶行列式定义</h3><script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
a&&b\\
c&&d
\end{array}
\right|
=ad-bc</script><p>同时从左上到右下称为<strong>主对角线</strong>，左下到右上称为<strong>副对角线</strong>。</p>
<span id="more"></span>
<h3 id="2-代入一元二次方程组"><a href="#2-代入一元二次方程组" class="headerlink" title="2. 代入一元二次方程组"></a>2. 代入一元二次方程组</h3><p>对于一元二次方程组：</p>
<script type="math/tex; mode=display">
\begin{cases}
a_1x+b_1y=c_1\\
a_2x+b_2y=c_2
\end{cases}</script><p>通过加减消元，我们可以得到：</p>
<script type="math/tex; mode=display">
(a_1b_2-a_2b_1)x=c_1b_2-c_2b_1\\
(a_2b_1-a_1b_2)y=c_1a_2-c_2a_1</script><p>如果系数行列式</p>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
a_1&&b_1\\
a_2&&b_2
\end{array}
\right|
=a_1b_2-a_2b_1\neq0</script><p>则方程组有唯一解，即：</p>
<script type="math/tex; mode=display">
\begin{cases}
x=
\frac
{\left|
\begin{array}
{ccc}
c_1&&b_1\\
c_2&&b_2
\end{array}
\right|}
{\left|
\begin{array}
{ccc}
a_1&&b_1\\
a_2&&b_2
\end{array}
\right|}\\
y=
\frac
{\left|
\begin{array}
{ccc}
a_1&&c_1\\
a_2&&c_2
\end{array}
\right|}
{\left|
\begin{array}
{ccc}
a_1&&b_1\\
a_2&&b_2
\end{array}
\right|}
\end{cases}</script><p>例：解下列方程组：</p>
<script type="math/tex; mode=display">
\begin{cases}
3x+2y=5\\
5x-7y=29
\end{cases}</script><blockquote>
<p>解：由于系数行列式</p>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
3&&2\\5&&-7
\end{array}
\right|
=-21-10=-31\neq0</script><p>所以方程组有唯一解</p>
<p>所以：</p>
<script type="math/tex; mode=display">
x=
\frac
{\left|
\begin{array}
{ccc}
5&&2\\29&&-7
\end{array}
\right|}
{-31}=3,
y=
\frac
{\left|
\begin{array}
{ccc}
3&&5\\5&&29
\end{array}
\right|}
{-31}=-2</script></blockquote>
<h3 id="3-三阶行列式"><a href="#3-三阶行列式" class="headerlink" title="3. 三阶行列式"></a>3. 三阶行列式</h3><script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
a_{11}&&a_{12}&&a_{13}\\
a_{21}&&a_{22}&&a_{23}\\
a_{31}&&a_{32}&&a_{33}
\end{array}
\right|=\\a_{11}a_{22}a_{33}+a_{12}a_{23}a_{31}+a_{13}a_{21}a_{32}-\\a_{13}a_{22}a_{31}-a_{12}a_{21}a_{33}-a_{11}a_{
23}a_{32}</script><font color=red>不同行不同列元素乘积的代数和</font>



<hr>
<h2 id="二、排列、逆序、逆序数"><a href="#二、排列、逆序、逆序数" class="headerlink" title="二、排列、逆序、逆序数"></a>二、排列、逆序、逆序数</h2><h3 id="1-排列"><a href="#1-排列" class="headerlink" title="1. 排列"></a>1. 排列</h3><blockquote>
<p>排列：由1,2,···,n组成的有序数组称为一个 <strong>n</strong> 阶排列。通常用 $j_1,j_2,j_3,···,j_n$表示 <strong>n</strong>阶排列。</p>
<p>自然排列：从1到n从小到大顺序排列成为自然排列。</p>
</blockquote>
<p>例： 2    4     1    3    ：4阶排列</p>
<p>​        1    3    5    4    2    ：5阶排列</p>
<h3 id="2-逆序与逆序数"><a href="#2-逆序与逆序数" class="headerlink" title="2. 逆序与逆序数"></a>2. 逆序与逆序数</h3><blockquote>
<p>逆序：在一个排列中，如果一个大的数排在一个小的数前面，就称这两个数构成一个逆序。</p>
<p>逆序数：一个排列中逆序的总数为这个排列的逆序数。用$\tau(j_1,j_2,···,j_n)$表示相关排列的逆序数。</p>
<p>偶排列：如果一个排列的逆序数为偶数，则称这个排列为偶排列</p>
<p>奇排列：如果一个排列的逆序数为奇数，则称这个排列为奇排列</p>
</blockquote>
<p>例：$\tau(1\,3\,2)=0+1=1$</p>
<p>​        $\tau(2\,4\,3\,1)=1+2+1=4$</p>
<h3 id="3-定理"><a href="#3-定理" class="headerlink" title="3.定理"></a>3.定理</h3><ul>
<li>对换改变排列的奇偶性</li>
<li>任意一个$n$阶排列可经过一系列兑换变成自然排列</li>
<li>在所有的$n$阶排列中，奇偶排列各占一半</li>
</ul>
<hr>
<h2 id="三、n阶行列式概念"><a href="#三、n阶行列式概念" class="headerlink" title="三、n阶行列式概念"></a>三、n阶行列式概念</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p><img src="https://i.loli.net/2021/03/21/rpPKtdU9Tsq1vRk.png" alt="定义"></p>
<p>完全展开式有$n!$项。</p>
]]></content>
      <categories>
        <category>线代</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>行列式性质</title>
    <url>/2021/03/22/xd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、上三角行列式与下三角行列式"><a href="#一、上三角行列式与下三角行列式" class="headerlink" title="一、上三角行列式与下三角行列式"></a>一、上三角行列式与下三角行列式</h2><h3 id="1-上三角行列式"><a href="#1-上三角行列式" class="headerlink" title="1. 上三角行列式"></a>1. 上三角行列式</h3><ul>
<li>定义：主对角线以下全部为0的行列式称为上三角行列式。</li>
<li>上三角行列式的值为主对角线的乘积。</li>
</ul>
<span id="more"></span>
<ul>
<li><strong>例：(以四阶为例)</strong></li>
</ul>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
a_{11}&&a_{12}&&a_{13}&&a_{14}\\
0&&a_{22}&&a_{23}&&a_{24}\\
0&&0&&a_{33}&&a_{34}\\
0&&0&&0&&a_{44}
\end{array}
\right|
=a_{11}a_{22}a_{33}a_{44}</script><h3 id="2-下三角行列式"><a href="#2-下三角行列式" class="headerlink" title="2. 下三角行列式"></a>2. 下三角行列式</h3><ul>
<li>定义：副对角线以下全部为0的行列式称为而下三角行列式。</li>
<li>下三角行列式的值为副对角线的乘积乘以 $(-1)^{\frac{1}{2}n(n-1)}$。</li>
<li><strong>例：(以四阶为例)</strong></li>
</ul>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
a_{11}&&a_{12}&&a_{13}&&a_{14}\\
a_{21}&&a_{22}&&a_{23}&&0\\
a_{31}&&a_{32}&&0&&0\\
a_{41}&&0&&0&&0
\end{array}
\right|
=(-1)^{\frac{1}{2}n(n-1)}a_{14}a_{23}a_{32}a_{41}</script><h3 id="3-tips"><a href="#3-tips" class="headerlink" title="3. tips"></a>3. <font color=red>tips</font></h3><p>二阶与三阶行列式的对角线法到四阶行列式失灵，计算四阶行列式必须用展开公式法(根据定义展开)。</p>
<h2 id="二、行列式的性质"><a href="#二、行列式的性质" class="headerlink" title="二、行列式的性质"></a>二、行列式的性质</h2><h3 id="1-行列互换，行列式的值不变"><a href="#1-行列互换，行列式的值不变" class="headerlink" title="1. 行列互换，行列式的值不变"></a>1. 行列互换，行列式的值不变</h3><p><img src="https://i.loli.net/2021/03/22/MZdV1QK9Y2v5XNR.png" alt="image-20210322195357646"></p>
<h3 id="2-对换行列式中两行的位置，行列式变号"><a href="#2-对换行列式中两行的位置，行列式变号" class="headerlink" title="2. 对换行列式中两行的位置，行列式变号"></a>2. 对换行列式中两行的位置，行列式变号</h3><p><img src="https://i.loli.net/2021/03/22/IY1Q3cJbLCU2A4f.png" alt="image-20210322201715848"></p>
<p><strong>推论：行列式两行<font color=red>成比例</font>，则行列式为$0$。</strong></p>
<h3 id="3-某行有公因数-k-可以将-k-提出"><a href="#3-某行有公因数-k-可以将-k-提出" class="headerlink" title="3. 某行有公因数$k$可以将$k$提出"></a>3. 某行有公因数$k$可以将$k$提出</h3><p><img src="https://i.loli.net/2021/03/22/YZFsOKl3kGxRgpN.png" alt="image-20210322201250223"></p>
<p> <strong>推论：若某一行元素全为$0$，则可以将$0$提出来，所以行列式的值为$0$。</strong></p>
<h3 id="4-行列式某行或某列是两个元素之和，则可以将行列式拆成两个行列式之和"><a href="#4-行列式某行或某列是两个元素之和，则可以将行列式拆成两个行列式之和" class="headerlink" title="4.行列式某行或某列是两个元素之和，则可以将行列式拆成两个行列式之和"></a>4.行列式某行或某列是两个元素之和，则可以将行列式拆成两个行列式之和</h3><p><img src="https://i.loli.net/2021/03/22/ZWnUfk3aLObA47N.png" alt="image-20210322202322696"></p>
<h3 id="5-某行的-k-倍加到另一行，行列式的值不变"><a href="#5-某行的-k-倍加到另一行，行列式的值不变" class="headerlink" title="5.某行的$k$倍加到另一行，行列式的值不变"></a>5.某行的$k$倍加到另一行，行列式的值不变</h3><p><img src="https://i.loli.net/2021/03/22/K5hwYbCirdVeSIU.png" alt="image-20210322202747554"></p>
<h2 id="三、例题"><a href="#三、例题" class="headerlink" title="三、例题"></a>三、例题</h2><p>已知$306,527,918$都能被$17$整除，不计算行列式的值，证明：</p>
<script type="math/tex; mode=display">
D=
\left|
\begin{array}
{ccc}
6&&7&&8\\
0&&2&&1\\
3&&5&&9
\end{array}
\right|,能被17整除。</script><p>证明：因为行列式是不同行不同列元素乘积的代数和，所以$D$必是一个整数。</p>
<p>将第三行的$100$倍，第二行的$10$倍都加到第一行，行列式的值不变，得到：</p>
<script type="math/tex; mode=display">
D=
\left|
\begin{array}
{ccc}
306&&527&&918\\
0&&2&&1\\
3&&5&&9
\end{array}
\right|=17k</script><p>故$D$能被$17$整除。</p>
]]></content>
      <categories>
        <category>线代</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>行列式展开式</title>
    <url>/2021/03/23/xd3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、代数余子式"><a href="#一、代数余子式" class="headerlink" title="一、代数余子式"></a>一、代数余子式</h2><span id="more"></span>
<p>在$n$阶行列式中划去$a_{ij}$所在的第$i$行、第$j$列的元素，由剩下的元素按照原来位置排法构成的一个$n-1$阶的行列式，称其为$a_{ij}$的余子式，记为$M_{ij}$；称$(-1)^{i+j}M_{ij}$为$a_{ij}$的代数余子式，记为$A_{ij}$，即$A_{ij}=(-1)^{i+j}M_{ij}$</p>
<ul>
<li><strong>余子式</strong> ：划去一行一列之后的$n-1$阶行列式，称为$a_{ij}$的余子式，记为$M_{ij}$</li>
<li><strong>代数余子式</strong> :在余子式前乘以$(-1)^{i+j}$，记为$A_{ij}$</li>
</ul>
<h2 id="二、行列式按行按列展开"><a href="#二、行列式按行按列展开" class="headerlink" title="二、行列式按行按列展开"></a>二、行列式按行按列展开</h2><p><img src="https://i.loli.net/2021/03/23/72MOfFQ4KDwGHTp.png" alt="image-20210323155606062"></p>
<p><img src="https://i.loli.net/2021/03/23/WHfT9vk7lyhzmCi.png" alt="image-20210323160123620"></p>
<h2 id="三、范德蒙行列式"><a href="#三、范德蒙行列式" class="headerlink" title="三、范德蒙行列式"></a>三、范德蒙行列式</h2><p>链接：<a href="https://baike.baidu.com/item/%E8%8C%83%E5%BE%B7%E8%92%99%E8%A1%8C%E5%88%97%E5%BC%8F/6081288?fr=aladdin">范德蒙行列式定义</a></p>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
1&&1&&1&&…&&1\\
a_1&&a_2&&a_3&&…&&a_n\\
a^2_{1}&&a^2_{2}&&a^2_{3}&&…&&a^2_{n}\\
\vdots&&\vdots&&\vdots&&\vdots&&\vdots\\
a_1^{n-1}&&a_2^{n-1}&&a_3^{n-1}&&…&&a_n^{n-1}
\end{array}
\right|
=\prod_{1\le j<i\le n}^{n}(a_i-a_j)</script><p>即：大坐标数减小坐标数的连乘器。</p>
<p>例.  求解下列行列式:</p>
<script type="math/tex; mode=display">
\left|
\begin{array}
{ccc}
1&&2&&3&&4\\
1&&2^2&&3^2&&4^2\\
1&&2^3&&3^3&&4^3\\
9&&8&&7&&6
\end{array}
\right|</script><p>解：将第一行加到第四行上,提取公因式，再构造范德蒙行列式</p>
<script type="math/tex; mode=display">
D=
\left|
\begin{array}
{ccc}
1&&2&&3&&4\\
1&&2^2&&3^2&&4^2\\
1&&2^3&&3^3&&4^3\\
10&&10&&10&&10
\end{array}
\right|
=10
\left|
\begin{array}
{ccc}
1&&2&&3&&4\\
1&&2^2&&3^2&&4^2\\
1&&2^3&&3^3&&4^3\\
1&&1&&1&&1
\end{array}
\right|\\
=-10
\left|
\begin{array}
{ccc}
1&&1&&1&&1\\
1&&2&&3&&4\\
1&&2^2&&3^2&&4^2\\
1&&2^3&&3^3&&4^3
\end{array}
\right|</script><p>所以$D=-10(2-1)(3-1)(4-1)(3-2)(4-2)(4-3)=-120$</p>
<hr>
<h2 id="四、克拉默法则"><a href="#四、克拉默法则" class="headerlink" title="四、克拉默法则"></a>四、克拉默法则</h2><p><img src="https://i.loli.net/2021/03/23/PIeroQLJaAFGZDn.png" alt="image-20210323230740265"></p>
]]></content>
      <categories>
        <category>线代</category>
      </categories>
      <tags>
        <tag>线代</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/2021/03/23/xd2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr>
<h2 id="一、矩阵的定义及运算"><a href="#一、矩阵的定义及运算" class="headerlink" title="一、矩阵的定义及运算"></a>一、矩阵的定义及运算</h2><p><img src="https://i.loli.net/2021/03/23/kf6ghYJGdUZbWKD.png" alt="image-20210323231848819"></p>
<p>注意：<font color =red>矩阵$A$是一个表格，而行列式$|A|$是一个数。</font></p>
<span id="more"></span>
<h2 id="二、常见的矩阵"><a href="#二、常见的矩阵" class="headerlink" title="二、常见的矩阵"></a>二、常见的矩阵</h2><ul>
<li>单位矩阵：主对角线元素为$1$，其余元素为$0$的矩阵为单位矩阵，记为$E$</li>
<li>对角矩阵：非对角元素都是$0$的矩阵(即$\forall i \neq j$恒有$a_{ij}=0$)成为对角矩阵</li>
<li>上(下)三角矩阵：当$i&gt;j(i&lt;j)$时，有$a_{ij}=0$称为上(下)三角矩阵</li>
<li>对称矩阵：满足$A^{T}=A$ ，即 $a_{ij}=a_{ji}$的矩阵称为对称矩阵</li>
<li>反对称矩阵：满足$A^{T}=-A$,即$a_{ij}=-a_{ji},a_{ii}=0$的矩阵称为反对称矩阵</li>
</ul>
<h2 id="三、矩阵的运算"><a href="#三、矩阵的运算" class="headerlink" title="三、矩阵的运算"></a>三、矩阵的运算</h2><ul>
<li>加法</li>
</ul>
<p><img src="https://i.loli.net/2021/03/24/LHJ9V7nswEkCNR3.png" alt="image-20210324120024689"></p>
<ul>
<li><p>数乘</p>
<p><img src="https://i.loli.net/2021/03/24/VFrgKeEcixw7N5U.png" alt="image-20210324120039681"></p>
</li>
<li><p>乘法</p>
<p><img src="https://i.loli.net/2021/03/24/OrlcXfxzmD6WiH8.png" alt="image-20210324120132691"></p>
</li>
<li><p>转置</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/24/AVOg6UBdm1Mk5Cj.png" alt="image-20210324120155384"></p>
<ul>
<li><font color =red>tips</font> <ol>
<li>$AB \neq BA$</li>
<li>由$AB=0 \nRightarrow A=0$或$B=0$</li>
<li>由$AB=AC$且$A \neq 0 \nRightarrow B=C$</li>
</ol>
</li>
</ul>
<p><img src="https://i.loli.net/2021/03/24/dIAJC9HxiyGuqV7.png" alt="image-20210324161522082"></p>
<hr>
<p>对角矩阵运算：</p>
<ul>
<li>相乘</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix} a_1 & 0 &0 \\ 0 & a_2&0\\0&0&a_3 \end{bmatrix}
\begin{bmatrix} b_1 & 0 &0 \\ 0 & b_2&0\\0&0&b_3 \end{bmatrix}=
\begin{bmatrix} a_1b_1 & 0 &0 \\ 0 & a_2b_2&0\\0&0&a_3b_3 \end{bmatrix}</script><ul>
<li>n次方</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix} a_1 & 0 &0 \\ 0 & a_2&0\\0&0&a_3 \end{bmatrix}^{n}=
\begin{bmatrix} a_1^{n} & 0 &0 \\ 0 & a_2^{n}&0\\0&0&a_3^{n} \end{bmatrix}</script><ul>
<li>逆矩阵</li>
</ul>
<script type="math/tex; mode=display">
\begin{bmatrix} a_1 & 0 &0 \\ 0 & a_2&0\\0&0&a_3 \end{bmatrix}
\begin{bmatrix} \frac{1}{a_1} & 0 &0 \\ 0 & \frac{1}{a_2}&0\\0&0&\frac{1}{a_3} \end{bmatrix}=
\begin{bmatrix} 1 & 0 &0 \\ 0 & 1&0\\0&0&1 \end{bmatrix}\\
所以,
\begin{bmatrix} a_1 & 0 &0 \\ 0 & a_2&0\\0&0&a_3 \end{bmatrix}^{-1}=
\begin{bmatrix} \frac{1}{a_1} & 0 &0 \\ 0 & \frac{1}{a_2}&0\\0&0&\frac{1}{a_3} \end{bmatrix}</script>]]></content>
      <categories>
        <category>线代</category>
      </categories>
      <tags>
        <tag>线代</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
</search>
